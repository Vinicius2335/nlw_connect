/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * NLW Connect
 * NLW Connect é uma API RESTFULL. Onde os usuários podem se inscrever em eventos e utilizar seu link de indicação gerado para convidar outras novas pessoas.
 * OpenAPI spec version: 1.0.0
 */
export interface UserSubscriptionRequest {
  name?: string
  email?: string
}

export interface SubscriptionResponse {
  subscriptionNumber?: number
  subscriberId?: number
  designation?: string
}

export type ProblemDetailProperties = {
  [key: string]: { [key: string]: unknown }
}

export interface ProblemDetail {
  type?: string
  title?: string
  status?: number
  detail?: string
  instance?: string
  properties?: ProblemDetailProperties
}

export interface CreateEventRequest {
  name?: string
  location?: string
  price?: number
  startDate?: string
  endDate?: string
  startTime?: string
  endTime?: string
}

export interface Event {
  eventId?: number
  title?: string
  prettyName?: string
  location?: string
  price?: number
  startDate?: string
  endDate?: string
  startTime?: LocalTime
  endTime?: LocalTime
}

export interface LocalTime {
  hour?: number
  minute?: number
  second?: number
  nano?: number
}

export interface SubscriptionRankingItem {
  subscribers?: number
  userName?: string
}

export interface SubscriptionRankingByUser {
  item?: SubscriptionRankingItem
  position?: number
}

export type CreateSubscriptionParams = {
  /**
   * Optional user ID that indicated the registration
   */
  referrer?: number
}

/**
 * Creates a new subscription for a user.
 * @summary Create a subscription
 */
export const getCreateSubscriptionUrl = (
  prettyName: string,
  params?: CreateSubscriptionParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size
    ? `http://localhost:8080/subscriptions/${prettyName}?${normalizedParams.toString()}`
    : `http://localhost:8080/subscriptions/${prettyName}`
}

export const createSubscription = async (
  prettyName: string,
  userSubscriptionRequest: UserSubscriptionRequest,
  params?: CreateSubscriptionParams,
  options?: RequestInit
): Promise<SubscriptionResponse> => {
  const res = await fetch(getCreateSubscriptionUrl(prettyName, params), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(userSubscriptionRequest),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: SubscriptionResponse = body ? JSON.parse(body) : {}

  return data
}

/**
 * Creates multiple subscriptions for testing purposes.
 * @summary Create multiple subscriptions
 */
export const getCreateMultipleSubscriptionsUrl = (
  prettyName: string,
  userId: number
) => {
  return `http://localhost:8080/subscriptions/${prettyName}/${userId}/test/addAll`
}

export const createMultipleSubscriptions = async (
  prettyName: string,
  userId: number,
  userSubscriptionRequest: UserSubscriptionRequest[],
  options?: RequestInit
): Promise<SubscriptionResponse> => {
  const res = await fetch(
    getCreateMultipleSubscriptionsUrl(prettyName, userId),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(userSubscriptionRequest),
    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: SubscriptionResponse = body ? JSON.parse(body) : {}

  return data
}

/**
 * Retrieves a list of all events.
 * @summary Get all events
 */
export const getFindAllEventsUrl = () => {
  return `http://localhost:8080/events`
}

export const findAllEvents = async (options?: RequestInit): Promise<Event> => {
  const res = await fetch(getFindAllEventsUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Event = body ? JSON.parse(body) : {}

  return data
}

/**
 * Creates a new event with the provided details.
 * @summary Create a new event
 */
export const getCreateNewEventUrl = () => {
  return `http://localhost:8080/events`
}

export const createNewEvent = async (
  createEventRequest: CreateEventRequest,
  options?: RequestInit
): Promise<Event> => {
  const res = await fetch(getCreateNewEventUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createEventRequest),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Event = body ? JSON.parse(body) : {}

  return data
}

/**
 * Generates a ranking of subscriptions for an event.
 * @summary Generate event ranking
 */
export const getGenerateRankingByEventUrl = (prettyName: string) => {
  return `http://localhost:8080/subscriptions/${prettyName}/ranking`
}

export const generateRankingByEvent = async (
  prettyName: string,
  options?: RequestInit
): Promise<SubscriptionRankingItem[]> => {
  const res = await fetch(getGenerateRankingByEventUrl(prettyName), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: SubscriptionRankingItem[] = body ? JSON.parse(body) : {}

  return data
}

/**
 * Generates a ranking for a user in an event.
 * @summary Generate user ranking
 */
export const getGenerateRankingByUserUrl = (
  prettyName: string,
  userId: number
) => {
  return `http://localhost:8080/subscriptions/${prettyName}/ranking/${userId}`
}

export const generateRankingByUser = async (
  prettyName: string,
  userId: number,
  options?: RequestInit
): Promise<SubscriptionRankingByUser> => {
  const res = await fetch(getGenerateRankingByUserUrl(prettyName, userId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: SubscriptionRankingByUser = body ? JSON.parse(body) : {}

  return data
}

/**
 * Finds an event by its pretty name.
 * @summary Find event by pretty name
 */
export const getFindEventByPrettyNameUrl = (prettyName: string) => {
  return `http://localhost:8080/events/${prettyName}`
}

export const findEventByPrettyName = async (
  prettyName: string,
  options?: RequestInit
): Promise<Event> => {
  const res = await fetch(getFindEventByPrettyNameUrl(prettyName), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Event = body ? JSON.parse(body) : {}

  return data
}
